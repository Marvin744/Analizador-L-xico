/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Analizador_lexico;

import javax.swing.JOptionPane;

/**
 *
 */
public class analizador_lexico_java extends javax.swing.JFrame {

    /**
     * Creates new form analizador_lexico_java
     */
    int Tabla_lexicografica[][];
    public analizador_lexico_java() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txt_resultado = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txt_entrada = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btn_reset = new javax.swing.JButton();
        btn_analizar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txt_estados = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(600, 350));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel1.setText("Analizador Léxico Java");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 10, 280, 30));

        txt_resultado.setEditable(false);
        txt_resultado.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        getContentPane().add(txt_resultado, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 130, 120, 30));

        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setText("Resultado");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 90, 80, 30));

        txt_entrada.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        getContentPane().add(txt_entrada, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 130, 120, 30));

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setText("Estados Recorridos");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 70, 150, -1));

        jLabel4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel4.setText("Entrada");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 90, 80, 30));

        btn_reset.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btn_reset.setText("Reset");
        btn_reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_resetActionPerformed(evt);
            }
        });
        getContentPane().add(btn_reset, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 210, 100, 40));

        btn_analizar.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btn_analizar.setText("Analizar");
        btn_analizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_analizarActionPerformed(evt);
            }
        });
        getContentPane().add(btn_analizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 210, 100, 40));

        txt_estados.setEditable(false);
        txt_estados.setColumns(20);
        txt_estados.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txt_estados.setRows(5);
        jScrollPane1.setViewportView(txt_estados);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 100, 180, 160));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_analizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_analizarActionPerformed
        analizador_lexico_java inicio = new analizador_lexico_java();
        inicio.Iniciar_tabla();
        int estado = 0;
        String entrada;
        int longitud = 0;
        int columna = -1;
        int actual;
        entrada = txt_entrada.getText();
        do{
            columna = inicio.Devolver_columna(entrada.charAt(longitud));
            estado = inicio.Devolver_estado(estado, columna);
            txt_estados.append("q"+String.valueOf(estado)+"\n");
            if(estado == 1300){
                longitud = entrada.length()+1;
            }
            longitud++;
        }while(longitud < entrada.length());
        if(estado == 1300){
            JOptionPane.showMessageDialog(null,"Error léxico, la entrada es incorrecta");
            txt_resultado.setText("Error Léxico");
        }else{
           columna = 28;
           actual = inicio.Devolver_estado(estado, columna);
           
           switch(actual){
               case 100:
                   JOptionPane.showMessageDialog(null,"La entrada corresponde a un delimitador");
                   txt_resultado.setText("Delimitador");
                   break;
               case 200:
                   JOptionPane.showMessageDialog(null,"La entrada corresponde a un identificador");
                   txt_resultado.setText("Identificador");
                   break; 
               case 300:
                   if(entrada.equals("abstract")||entrada.equals("assert")||entrada.equals("boolean")||entrada.equals("break")||entrada.equals("byte")||entrada.equals("case")||entrada.equals("catch")||entrada.equals("char")||entrada.equals("class")||entrada.equals("const")
                           ||entrada.equals("continue")||entrada.equals("default")||entrada.equals("do")||entrada.equals("double")||entrada.equals("else")||entrada.equals("enum")||entrada.equals("extends")||entrada.equals("final")||entrada.equals("finally")||entrada.equals("float")
                           ||entrada.equals("for")||entrada.equals("goto")||entrada.equals("if")||entrada.equals("implements")||entrada.equals("import")||entrada.equals("instanceof")||entrada.equals("int")||entrada.equals("interface")||entrada.equals("long")||entrada.equals("native")
                           ||entrada.equals("new")||entrada.equals("package")||entrada.equals("private")||entrada.equals("protected")||entrada.equals("public")||entrada.equals("return")||entrada.equals("String")||entrada.equals("short")||entrada.equals("static")||entrada.equals("strictfp")||entrada.equals("super")
                           ||entrada.equals("switch")||entrada.equals("synchronized")||entrada.equals("this")||entrada.equals("throw")||entrada.equals("throws")||entrada.equals("transient")||entrada.equals("try")||entrada.equals("void")||entrada.equals("volatile")||entrada.equals("while")
                           ){
                            JOptionPane.showMessageDialog(null,"La entrada corresponde a una palabra reservada");
                            txt_resultado.setText("Palabra Reservada");
                   }else{
                       JOptionPane.showMessageDialog(null,"La entrada corresponde a un identificador");
                       txt_resultado.setText("Identificador");
                   } 
                   
                   break; 
               case 400:
                   JOptionPane.showMessageDialog(null,"La entrada corresponde a un operador aritmético");
                   txt_resultado.setText("Operador Aritmético");
                   break;
               case 500:
                   JOptionPane.showMessageDialog(null,"La entrada corresponde a un comentario");
                   txt_resultado.setText("Comentario");
                   break;
               case 600:
                   JOptionPane.showMessageDialog(null,"La entrada corresponde a un operador relacional");
                   txt_resultado.setText("Operador Relacional");
                   break;
               case 700:
                   JOptionPane.showMessageDialog(null,"La entrada corresponde a un operador de asignación");
                   txt_resultado.setText("Operador de asignación");
                   break;
               case 800:
                   JOptionPane.showMessageDialog(null,"La entrada corresponde a una cadena de texto");
                   txt_resultado.setText("Cadena de Texto");
                   break;
               case 900:
                   JOptionPane.showMessageDialog(null,"La entrada corresponde a un operador lógico");
                   txt_resultado.setText("Operador Lógico");
                   break;
               case 1000:
                   JOptionPane.showMessageDialog(null,"La entrada corresponde a una constante numérica entera");
                   txt_resultado.setText("Constante Numérica Entera");
                   break;
               case 1100:
                   JOptionPane.showMessageDialog(null,"La entrada corresponde a una constante numérica decimal");
                   txt_resultado.setText("Constante Numérica Decimal");
                   break;
               case 1300:
                   JOptionPane.showMessageDialog(null,"Error léxico, la entrada es incorrecta");
                   txt_resultado.setText("Error Léxico");
                   break;
           }
        
        }
        
        
    }//GEN-LAST:event_btn_analizarActionPerformed

    private void btn_resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_resetActionPerformed
        txt_entrada.setText("");
        txt_estados.setText("");
        txt_resultado.setText("");
    }//GEN-LAST:event_btn_resetActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(analizador_lexico_java.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(analizador_lexico_java.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(analizador_lexico_java.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(analizador_lexico_java.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        
        
       
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new analizador_lexico_java().setVisible(true);
            }
        });
        
        
    }
    
    
    public void Iniciar_tabla(){
        Tabla_lexicografica = new int [34][29]; //Aquí se definen las dimensiones de la matriz, en este caso, es de 5 filas por 4 columnas.
        
        for(int i=0; i<34; i++){ //Se recorren las filas (la variable i equivale a las filas)
            for(int j=0; j<29; j++){ //Se recorren las columnas (la variable j equivale a las columnas)
                Tabla_lexicografica[i][j]=1300;
        
        }
        }//Los dos for sirvieron para llenar de 1300 toda la matriz
        
        //A continuación, se definen los valores de los estados específicos para cada posición de la matriz.
        
        Tabla_lexicografica[0][0] = 5;      Tabla_lexicografica[1][28] = 100;       Tabla_lexicografica[8][28] = 400;       Tabla_lexicografica[16][28] = 500;      Tabla_lexicografica[30][7] = 13;       
        Tabla_lexicografica[0][1] = 5;      Tabla_lexicografica[2][4] = 2;          Tabla_lexicografica[9][4] = 9;          Tabla_lexicografica[17][28] = 600;      Tabla_lexicografica[30][9] = 19;
        Tabla_lexicografica[0][2] = 3;      Tabla_lexicografica[2][19] = 7;         Tabla_lexicografica[9][28] = 1100;      Tabla_lexicografica[18][9] = 19;        Tabla_lexicografica[30][10] = 11;
        Tabla_lexicografica[0][3] = 3;      Tabla_lexicografica[2][28] = 1000;      Tabla_lexicografica[10][28] = 400;      Tabla_lexicografica[19][28] = 700;      Tabla_lexicografica[30][28] = 400;
        Tabla_lexicografica[0][4] = 2;      Tabla_lexicografica[3][0] = 4;          Tabla_lexicografica[11][0] = 12;        Tabla_lexicografica[20][0] = 21;        Tabla_lexicografica[31][9] = 17;
        Tabla_lexicografica[0][5] = 27;     Tabla_lexicografica[3][1] = 4;          Tabla_lexicografica[11][1] = 12;        Tabla_lexicografica[20][1] = 21;        Tabla_lexicografica[31][28] = 600;
        Tabla_lexicografica[0][6] = 28;     Tabla_lexicografica[3][2] = 4;          Tabla_lexicografica[11][4] = 12;        Tabla_lexicografica[20][4] = 21;        Tabla_lexicografica[32][9] = 17;
        Tabla_lexicografica[0][7] = 29;     Tabla_lexicografica[3][3] = 4;          Tabla_lexicografica[11][6] = 12;        Tabla_lexicografica[20][6] = 21;        Tabla_lexicografica[32][28] = 700;
        Tabla_lexicografica[0][8] = 29;     Tabla_lexicografica[3][4] = 4;          Tabla_lexicografica[11][16] = 12;       Tabla_lexicografica[20][16] = 21;       Tabla_lexicografica[33][9] = 17;
        Tabla_lexicografica[0][9] = 32;     Tabla_lexicografica[4][0] = 4;          Tabla_lexicografica[12][0] = 12;        Tabla_lexicografica[21][0] = 21;        Tabla_lexicografica[33][28] = 900;
        Tabla_lexicografica[0][10] = 30;    Tabla_lexicografica[4][1] = 4;          Tabla_lexicografica[12][1] = 12;        Tabla_lexicografica[21][1] = 21;        Tabla_lexicografica[27][28] = 400;
        Tabla_lexicografica[0][11] = 31;    Tabla_lexicografica[4][2] = 4;          Tabla_lexicografica[12][4] = 12;        Tabla_lexicografica[21][4] = 21;
        Tabla_lexicografica[0][12] = 31;    Tabla_lexicografica[4][3] = 4;          Tabla_lexicografica[12][6] = 12;        Tabla_lexicografica[21][6] = 21;
        Tabla_lexicografica[0][13] = 33;    Tabla_lexicografica[4][4] = 4;          Tabla_lexicografica[12][16] = 12;       Tabla_lexicografica[21][15] = 22;
        Tabla_lexicografica[0][14] = 18;    Tabla_lexicografica[4][28] = 200;       Tabla_lexicografica[12][28] = 500;      Tabla_lexicografica[21][16] = 21;
        Tabla_lexicografica[0][15] = 20;    Tabla_lexicografica[5][0] = 4;          Tabla_lexicografica[13][0] = 14;        Tabla_lexicografica[22][28] = 800;
        Tabla_lexicografica[0][17] = 23;    Tabla_lexicografica[5][1] = 6;          Tabla_lexicografica[13][1] = 14;        Tabla_lexicografica[23][17] = 24;
        Tabla_lexicografica[0][18] = 25;    Tabla_lexicografica[5][2] = 4;          Tabla_lexicografica[13][4] = 14;        Tabla_lexicografica[24][28] = 900;
        Tabla_lexicografica[0][19] = 1;     Tabla_lexicografica[5][3] = 4;          Tabla_lexicografica[13][6] = 14;        Tabla_lexicografica[25][18] = 26;
        Tabla_lexicografica[0][20] = 1;     Tabla_lexicografica[5][4] = 4;          Tabla_lexicografica[13][16] = 14;       Tabla_lexicografica[26][28] = 900;
        Tabla_lexicografica[0][21] = 1;     Tabla_lexicografica[6][0] = 4;          Tabla_lexicografica[14][0] = 14;        Tabla_lexicografica[27][5] = 8;
        Tabla_lexicografica[0][22] = 1;     Tabla_lexicografica[6][1] = 6;          Tabla_lexicografica[14][1] = 14;        Tabla_lexicografica[27][9] = 19;
        Tabla_lexicografica[0][23] = 1;     Tabla_lexicografica[6][2] = 4;          Tabla_lexicografica[14][4] = 14;        Tabla_lexicografica[28][6] = 10;
        Tabla_lexicografica[0][24] = 1;     Tabla_lexicografica[6][3] = 4;          Tabla_lexicografica[14][6] = 14;        Tabla_lexicografica[28][9] = 19;
        Tabla_lexicografica[0][25] = 1;     Tabla_lexicografica[6][4] = 4;          Tabla_lexicografica[14][7] = 15;        Tabla_lexicografica[28][28] = 400;
        Tabla_lexicografica[0][26] = 1;     Tabla_lexicografica[6][28] = 300;       Tabla_lexicografica[14][16] = 14;       Tabla_lexicografica[29][9] = 19;
        Tabla_lexicografica[0][27] = 1;     Tabla_lexicografica[7][4] = 9;          Tabla_lexicografica[15][10] = 16;       Tabla_lexicografica[29][28] = 400;
        
           
        
        
        
    }
    
    public int Devolver_columna(char caracter){
        int columna = -1;
        if(caracter >=65 && caracter <=90){
           columna = 0;
        }
        if(caracter >=97 && caracter <=122){
            columna = 1;
        }
        if(caracter == '_'){
            columna = 2;
        }
        if(caracter == '$'){
            columna = 3;
        }
        if(caracter >=48 && caracter <=57){
            columna = 4;
        }
        if(caracter == '+'){
            columna = 5;
        }
        if(caracter == '-'){
            columna = 6;
        }
        if(caracter == '*'){
            columna = 7;
        }
        if(caracter == '%'){
            columna = 8;
        }
        if(caracter == '='){
            columna = 9;
        }
        if(caracter == '/'){
            columna = 10;
        }
        if(caracter == '<'){
            columna = 11;
        }
        if(caracter == '>'){
            columna = 12;
        }
        if(caracter == '!'){
            columna = 13;
        }
        if(caracter == '^'){
            columna = 14;
        }
        if(caracter == '"'){
            columna = 15;
        }
        if(caracter == ' '){
            columna = 16;
        }
        if(caracter == '&'){
            columna = 17;
        }
        if(caracter == '|'){
            columna = 18;
        }
        if(caracter == '.'){
            columna = 19;
        }
        if(caracter == '('){
            columna = 20;
        }
        if(caracter == ')'){
            columna = 21;
        }
        if(caracter == '{'){
            columna = 22;
        }
        if(caracter == '}'){
            columna = 23;
        }
        if(caracter == '['){
            columna = 24;
        }
        if(caracter == ']'){
            columna = 25;
        }
        if(caracter == ';'){
            columna = 26;
        }
        if(caracter == ','){ 
            columna = 27;
        }
        
        return columna;
    //En el método de Devolver_columna, especificamos el valor o número de columna para cada caracter. El método nos devuelve el valor de la columna.
    }
    
    public int Devolver_estado(int estado, int columna){
        return Tabla_lexicografica[estado][columna];
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_analizar;
    private javax.swing.JButton btn_reset;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txt_entrada;
    private javax.swing.JTextArea txt_estados;
    private javax.swing.JTextField txt_resultado;
    // End of variables declaration//GEN-END:variables
}
